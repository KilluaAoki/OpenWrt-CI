name: OpenWrt-Core

on:
  workflow_call:
    inputs:
      WRT_BRANCH:
        required: true
        type: string
      WRT_TARGET:
        required: true
        type: string
      WRT_DEVICE:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_URL:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_DEVICE: ${{inputs.WRT_DEVICE}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_URL: ${{inputs.WRT_URL}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  wrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"
          testing: false

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean

      - name: Initialization Values
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%Y_%m_%d_%H_%M_%S")
          export WRT_REPO=$(basename $GITHUB_WORKSPACE)
          export WRT_SOURCE=$(echo ${WRT_URL%.git} | cut -d '/' -f 5-)
          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_REPO=$WRT_REPO" >> $GITHUB_ENV
          echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./openwrt/
          cd ./openwrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        if: env.WRT_TEST != 'true'
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{env.WRT_SOURCE}}-${{env.WRT_TARGET}}-${{env.WRT_HASH}}
          path: |
            ./openwrt/.ccache
            ./openwrt/staging_dir/host*
            ./openwrt/staging_dir/tool*

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./openwrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./openwrt/Makefile
            echo "toolchain skiped done!"
          else
            gh extension install actions/gh-actions-cache
            CACHE_LIST=$(gh actions-cache list --key "$WRT_SOURCE-$WRT_TARGET" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done
            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./openwrt/
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./openwrt/package/
          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./openwrt/
          rm -rf ./tmp && rm -rf .config
          cat $GITHUB_WORKSPACE/Config/$WRT_TARGET.config >> .config
          $GITHUB_WORKSPACE/Scripts/Settings.sh
          make defconfig

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./openwrt/
          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./openwrt/
          make -j$(nproc) || make -j1 V=s

      - name: Package Firmware
        run: |
          cd ./openwrt/ && mkdir ./upload/
          cp -f ./.config ./upload/Config-"$WRT_SOURCE"-"$WRT_TARGET"-"$WRT_DATE".txt
          if [[ $WRT_TEST != 'true' ]]; then
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
            for DEVICE in $WRT_DEVICE ; do
              for FILE in $(find ./bin/targets/ -type f -iname "*$DEVICE*.*") ; do
                EXT=$(basename $FILE | cut -d '.' -f 2-)
                NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($DEVICE\).*")
                NEW_FILE="$WRT_SOURCE"-"$WRT_DATE"-"$NAME"."$EXT"
                mv -f $FILE ./upload/$NEW_FILE
              done
            done
            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_SOURCE}}-${{env.WRT_TARGET}}-${{env.WRT_DATE}}
          files: ./openwrt/upload/*.*
          body: ""
